using System;
using System.Collections.Generic;

class Program
{
    static void Main()
    {
        List<Phanso> danhSachPhanso = new List<Phanso>();

        do
        {
            Console.WriteLine("\n--CHUONG TRINH TINH TOAN PHAN SO--");
            Console.WriteLine("1. Them moi phan tu vao danh sach");
            Console.WriteLine("2. Hien thi danh sach phan tu");
            Console.WriteLine("3. Sap xep danh sach phan tu");
            Console.WriteLine("4. Tim kiem phan tu trong mang");
            Console.WriteLine("5. Chen phan tu vao mang");
            Console.WriteLine("6. Xoa phan tu khoi danh sach");
            Console.WriteLine("0. Ket thuc chuong trinh");
            
            Console.Write("Xin moi lua chon thao tac: ");

            int choice = Convert.ToInt32(Console.ReadLine());

            switch (choice)
            {
                case 1:
                    ThemPhanSo(danhSachPhanso);
                    break;
                case 2:
                    HienThiDanhSach(danhSachPhanso);
                    break;
                case 3:
                    SapXepDanhSach(danhSachPhanso);
                    break;
                case 4:
                    TimKiemPhanTu(danhSachPhanso);
                    break;
                case 5:
                    ChenPhanTu(danhSachPhanso);
                    break;
                case 6:
                    XoaPhanTu(danhSachPhanso);
                    break;
                case 0:
                    Console.WriteLine("Ket thuc chuong trinh. Cam on!");
                    break;
                default:
                    Console.WriteLine("Lua chon khong hop le. Vui long thu lai.");
                    break;
            }

        } while (true);
    }

    static void ThemPhanSo(List<Phanso> danhSachPhanso)
    {
        Console.Write("Nhap tu so: ");
        int tuSo = int.Parse(Console.ReadLine());

        Console.Write("Nhap mau so (khac 0): ");
        int mauSo;
        while (true)
        {
            mauSo = int.Parse(Console.ReadLine());
            if (mauSo != 0)
                break;
            else
                Console.Write("Mau so khong duoc bang 0. Nhap lai: ");
        }

        Phanso phanso = new Phanso(tuSo, mauSo);
        danhSachPhanso.Add(phanso);

        Console.WriteLine("Da them phan so vao danh sach.");
    }

    static void HienThiDanhSach(List<Phanso> danhSachPhanso)
    {
        Console.WriteLine("\nDanh sach cac phan so:");

        for (int i = 0; i < danhSachPhanso.Count; i++)
        {
            Console.Write($"Phan so thu {i + 1}: ");
            danhSachPhanso[i].InPhanso();
        }
    }

    static void SapXepDanhSach(List<Phanso> danhSachPhanso)
    {
        danhSachPhanso.Sort();
        Console.WriteLine("Da sap xep danh sach theo thu tu tang dan.");
    }

    static void TimKiemPhanTu(List<Phanso> danhSachPhanso)
    {
        Console.Write("Nhap gia tri can tim kiem: ");
        double giaTri = double.Parse(Console.ReadLine());

        Phanso phansoTimDuoc = danhSachPhanso.Find(p => (double)p.TuSo / p.MauSo == giaTri);

        if (phansoTimDuoc != null)
        {
            Console.Write("Phan so tim thay: ");
            phansoTimDuoc.InPhanso();
        }
        else
        {
            Console.WriteLine("Khong tim thay phan so co gia tri can tim.");
        }
    }

    static void ChenPhanTu(List<Phanso> danhSachPhanso)
    {
        Console.Write("Nhap vi tri can chen: ");
        int viTriChen = int.Parse(Console.ReadLine());

        if (viTriChen >= 0 && viTriChen <= danhSachPhanso.Count)
        {
            Console.Write("Nhap tu so: ");
            int tuSo = int.Parse(Console.ReadLine());

            Console.Write("Nhap mau so (khac 0): ");
            int mauSo;
            while (true)
            {
                mauSo = int.Parse(Console.ReadLine());
                if (mauSo != 0)
                    break;
                else
                    Console.Write("Mau so khong duoc bang 0. Nhap lai: ");
            }

            Phanso phanso = new Phanso(tuSo, mauSo);
            danhSachPhanso.Insert(viTriChen, phanso);

            Console.WriteLine("Da chen phan so vao danh sach.");
        }
        else
        {
            Console.WriteLine("Vi tri chen khong hop le.");
        }
    }

    static void XoaPhanTu(List<Phanso> danhSachPhanso)
    {
        Console.Write("Nhap vi tri can xoa: ");
        int viTriXoa = int.Parse(Console.ReadLine());

        if (viTriXoa >= 0 && viTriXoa < danhSachPhanso.Count)
        {
            danhSachPhanso.RemoveAt(viTriXoa);
            Console.WriteLine("Da xoa phan so khoi danh sach.");
        }
        else
        {
            Console.WriteLine("Vi tri xoa khong hop le.");
        }
    }
}

class Phanso : IComparable<Phanso>
{
    public int TuSo { get; private set; }
    public int MauSo { get; private set; }

    public Phanso(int tuSo, int mauSo)
    {
        TuSo = tuSo;
        MauSo = mauSo != 0 ? mauSo : 1;
        RutGon();
    }

    private static int UCLN(int a, int b)
    {
        a = Math.Abs(a);
        b = Math.Abs(b);

        while (a != b)
        {
            if (a > b)
                a -= b;
            else
                b -= a;
        }

        return a;
    }

    private void RutGon()
    {
        int ucln = UCLN(TuSo, MauSo);
        TuSo /= ucln;
        MauSo /= ucln;

        if (MauSo < 0)
        {
            TuSo = -TuSo;
            MauSo = -MauSo;
        }
    }

    public static Phanso operator +(Phanso ps1, Phanso ps2)
   
        Phanso result = new Phanso(ps1.TuSo * ps2.MauSo + ps2.T         uSo * ps1.MauSo, ps1.MauSo * ps2.MauSo);
        result.RutGon();
        return result;
    }

    public static Phanso operator -(Phanso ps1, Phanso ps2)
    {
        Phanso result = new Phanso(ps1.TuSo * ps2.MauSo - ps2.TuSo * ps1.MauSo, ps1.MauSo * ps2.MauSo);
        result.RutGon();
        return result;
    }

    public static Phanso operator *(Phanso ps1, Phanso ps2)
    {
        Phanso result = new Phanso(ps1.TuSo * ps2.TuSo, ps1.MauSo * ps2.MauSo);
        result.RutGon();
        return result;
    }

    public static Phanso operator /(Phanso ps1, Phanso ps2)
    {
        if (ps2.TuSo == 0)
        {
            Console.WriteLine("Khong the chia cho so 0.");
            return null;
        }

        Phanso result = new Phanso(ps1.TuSo * ps2.MauSo, ps1.MauSo * ps2.TuSo);
        result.RutGon();
        return result;
    }

    public void InPhanso()
    {
        Console.WriteLine($"{TuSo}/{MauSo}");
    }

    public int CompareTo(Phanso other)
    {
        double value1 = (double)TuSo / MauSo;
        double value2 = (double)other.TuSo / other.MauSo;

        return value1.CompareTo(value2);
    }
}
